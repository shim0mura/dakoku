#!/usr/bin/env ruby

require 'readline'
require 'yaml'
require 'pp'

JOURNAL_HOME = File.expand_path("~") + "/.dakoku"
USAGE = <<HELP
  USAGE dakoku [options] what are you doing
  -h (--help)   show this help
  -l (--list)   show your journal of the selected day
  -a (--amend)  update your last journal
  -u (--update)  update your journal of the selected line of that day
  -c (--config) change reminder settings
HELP

#$LOAD_PATH.unshift File.expand_path("../lib", File.dirname(__FILE__))

class Dakoku
  def initialize
    now = Time.now
    check_dir(JOURNAL_HOME + "/#{now.year}/#{now.month}")
    #check_conf
    @file = nil
    @now = Time.now
  end

  def journal(doing)
    set_file("a")
    @file.write(@now.to_s + ": " + doing + "\n")
    @file.close
  end

  def list(year = @now.year, month = @now.month)
    search_dir = JOURNAL_HOME + "/#{year}/#{month}/*"
    file_list = Dir.glob(search_dir).sort!
    counter = puts_lists(file_list)

    puts "\n" + "-" * 20
    puts "\nselect line number you want to show.\n\n"
    input = get_input(0..counter-1)

    set_file("r", file_list[input.to_i])
    puts_lists(@file.readlines)
    @file.close
  end

  def amend(doing)
    set_file("r+")
    lines = @file.readlines
    lines[lines.size-1] = @now.to_s + ": " + doing + "\n"
    @file.seek(0)
    lines.each{|value| @file.write(value.to_s)}
  end

  def update
    set_file("r")
    lines = @file.readlines
    if lines.empty?
      puts "There is no journal to be update."
      exit!
    end

    counter = puts_lists(lines)
    puts "\n" + "-" * 20
    puts "\nselect line number you want to update.\n\n"
    input = get_input(0..counter-1)
    puts "\n#{lines[input]}\ninput alter journal."
    while amend = Readline.readline("journal? > ", false)
      break if amend
    end
    lines[input] = amend + "\n"
    set_file("w")

    lines.each{|value| @file.write(value.to_s)}
  end

  private
  def get_input(validate_range)
    begin
      while select = Readline.readline("line? > ", false).to_i
        break if validate_range.include?(select)
        next puts "invalid input. select line number."
      end
    rescue Interrupt
      puts "...exit dakoku"
      exit!
    end
    select
  end
  #def getAround(year, month)
  #  date = DateTime.new(year, month)
  #  date.new_offset(Rational(9, 24))

  #  before_year = (date<<1).year
  #  before_month = (date<<).month
  #  next_year = (date>>1).year
  #  next_month = (date>>1).month
  #  return if check_dir(JOURNAL_HOME + "/#{year}/#{month}")
  #end

  def check_dir(path)
    return true if File.exist?(path)
    check_dir(File.dirname(path), mkdir?)
    Dir.mkdir(path)
  end

  def set_file(type, filename = nil)
    unless filename
      filename = JOURNAL_HOME + "/#{@now.year}/#{@now.month}/#{@now.strftime('%Y%m%d')}.dat"
    end
    @file = open(filename, type)
  end

  def puts_lists(lists)
    counter = 0
    puts "\n"
    lists.each do |line|
      puts "[#{counter}]  " + line
      counter += 1
    end
    counter
  end
end

class DakokuConfig
  def initialize
    @conf = YAML.load(open(JOURNAL_HOME + "/config.yaml", "w+").read)
    @cron = @cong.cron
  end

  def list
    @conf.each do |key, value|
      puts "setting for #{key} :"
      value.each do |_k, _v|
        puts "  #{_k} : #{_v}"
      end
    end
  end

  def set(key, value)
    


  end

  def check_key(key)
    @conf.each do |config, value|
      return true value.has_key?(key)
      false
    end
  end

end

dakoku = Dakoku.new

case ARGV[0]
when "-h", "--help", nil
  puts USAGE
when "-l", "--list"
  dakoku.list
when "-u", "--update"
  dakoku.update
when "-a", "--amend"
  ARGV.delete_at(0)
  dakoku.amend(ARGV.join(" "))
else
  dakoku.journal(ARGV.join(" "))
end
